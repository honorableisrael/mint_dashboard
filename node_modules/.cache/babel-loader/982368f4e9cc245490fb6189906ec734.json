{"ast":null,"code":"import axios from \"axios\";\nimport { root } from \"../../config\";\nimport { getToken, errorHandler } from \"./helper\";\nconst ConnectForms = axios.create();\nConnectForms.interceptors.request.use(config => {\n  config.baseURL = root;\n  config.headers['Authorization'] = getToken() && `Bearer ${getToken()}`;\n  config.headers['Content-Type'] = 'multipart/form-data';\n  config.headers['Accept'] = 'multipart/form-data';\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nConnectForms.interceptors.response.use(response => {\n  return response;\n}, error => {\n  errorHandler(error);\n});\nexport default ConnectForms;","map":{"version":3,"sources":["/Users/frontenddev/Documents/FC INVENTORY/src/Components/Services/ConnectForms.ts"],"names":["axios","root","getToken","errorHandler","ConnectForms","create","interceptors","request","use","config","baseURL","headers","error","Promise","reject","response"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,UAAvC;AAEA,MAAMC,YAAY,GAAGJ,KAAK,CAACK,MAAN,EAArB;AAEAD,YAAY,CAACE,YAAb,CAA0BC,OAA1B,CAAkCC,GAAlC,CAAsCC,MAAM,IAAI;AAC5CA,EAAAA,MAAM,CAACC,OAAP,GAAiBT,IAAjB;AACAQ,EAAAA,MAAM,CAACE,OAAP,CAAe,eAAf,IAAkCT,QAAQ,MAAO,UAASA,QAAQ,EAAG,EAArE;AACAO,EAAAA,MAAM,CAACE,OAAP,CAAe,cAAf,IAAiC,qBAAjC;AACAF,EAAAA,MAAM,CAACE,OAAP,CAAe,QAAf,IAA2B,qBAA3B;AACA,SAAOF,MAAP;AACH,CAND,EAMGG,KAAK,IAAI;AACR,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CARD;AAUAR,YAAY,CAACE,YAAb,CAA0BS,QAA1B,CAAmCP,GAAnC,CAAuCO,QAAQ,IAAI;AAC/C,SAAOA,QAAP;AACH,CAFD,EAEGH,KAAK,IAAI;AACRT,EAAAA,YAAY,CAACS,KAAD,CAAZ;AACH,CAJD;AAMA,eAAeR,YAAf","sourcesContent":["import axios from \"axios\";\nimport { root } from \"../../config\";\nimport { getToken, errorHandler } from \"./helper\";\n\nconst ConnectForms = axios.create();\n\nConnectForms.interceptors.request.use(config => {\n    config.baseURL = root;\n    config.headers['Authorization'] = getToken() && `Bearer ${getToken()}`;\n    config.headers['Content-Type'] = 'multipart/form-data';\n    config.headers['Accept'] = 'multipart/form-data';\n    return config\n}, error => {\n    return Promise.reject(error)\n})\n\nConnectForms.interceptors.response.use(response => {\n    return response\n}, error => {\n    errorHandler(error)\n})\n\nexport default ConnectForms;"]},"metadata":{},"sourceType":"module"}