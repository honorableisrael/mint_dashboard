{"ast":null,"code":"import axios from \"axios\";\nimport { errorHandler, getToken } from \"./helper\";\nconst ConnectForms = axios.create();\nConnectForms.interceptors.request.use(config => {\n  config.baseURL = root;\n  config.headers['Authorization'] = getToken() && `Bearer ${getToken()}`;\n  config.headers['Content-Type'] = 'multipart/form-data';\n  config.headers['Accept'] = 'multipart/form-data';\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nConnectForms.interceptors.response.use(response => {\n  return response;\n}, error => {\n  errorHandler(error);\n});\nexport default ConnectForms;","map":{"version":3,"sources":["/Users/frontenddev/Documents/FC INVENTORY/src/Components/Services/ConnectForms.ts"],"names":["axios","errorHandler","getToken","ConnectForms","create","interceptors","request","use","config","baseURL","root","headers","error","Promise","reject","response"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,QAAvB,QAAuC,UAAvC;AAEA,MAAMC,YAAY,GAAGH,KAAK,CAACI,MAAN,EAArB;AAEAD,YAAY,CAACE,YAAb,CAA0BC,OAA1B,CAAkCC,GAAlC,CAAsCC,MAAM,IAAI;AAC5CA,EAAAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAF,EAAAA,MAAM,CAACG,OAAP,CAAe,eAAf,IAAkCT,QAAQ,MAAO,UAASA,QAAQ,EAAG,EAArE;AACAM,EAAAA,MAAM,CAACG,OAAP,CAAe,cAAf,IAAiC,qBAAjC;AACAH,EAAAA,MAAM,CAACG,OAAP,CAAe,QAAf,IAA2B,qBAA3B;AACA,SAAOH,MAAP;AACH,CAND,EAMGI,KAAK,IAAI;AACR,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CARD;AAUAT,YAAY,CAACE,YAAb,CAA0BU,QAA1B,CAAmCR,GAAnC,CAAuCQ,QAAQ,IAAI;AAC/C,SAAOA,QAAP;AACH,CAFD,EAEGH,KAAK,IAAI;AACRX,EAAAA,YAAY,CAACW,KAAD,CAAZ;AACH,CAJD;AAMA,eAAeT,YAAf","sourcesContent":["import axios from \"axios\";\nimport { errorHandler, getToken } from \"./helper\";\n\nconst ConnectForms = axios.create();\n\nConnectForms.interceptors.request.use(config => {\n    config.baseURL = root;\n    config.headers['Authorization'] = getToken() && `Bearer ${getToken()}`;\n    config.headers['Content-Type'] = 'multipart/form-data';\n    config.headers['Accept'] = 'multipart/form-data';\n    return config\n}, error => {\n    return Promise.reject(error)\n})\n\nConnectForms.interceptors.response.use(response => {\n    return response\n}, error => {\n    errorHandler(error)\n})\n\nexport default ConnectForms;"]},"metadata":{},"sourceType":"module"}