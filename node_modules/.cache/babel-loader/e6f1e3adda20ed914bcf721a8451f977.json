{"ast":null,"code":"import { DashboardConstants } from \"../constants/AdminConstants\";\nimport Connector from \"../Components/Services/services\";\nimport { getAdminUtils, reloadPage } from \"../Components/Services/helper\";\nimport arrayMutators from \"final-form-arrays\";\nimport { FieldArray } from \"react-final-form-arrays\";\nimport { notify } from \"../config\";\nimport ConnectForms from \"../Components/Services/ConnectForms\";\nexport const dashboardActions = {\n  getDashboardStats,\n  getAllRoles,\n  registerOrganisation,\n  getAllOrganisation,\n  registerClient,\n  registerStaff,\n  getAllDrugs,\n  getAllAgentsCategories,\n  createDrug,\n  getOneOrganisation,\n  getOneUser,\n  editStaff,\n  getAllManufacturers,\n  getOneManufacturer,\n  registerManufacturer,\n  updateManufacturer,\n  updateSuppliers,\n  getAllSuppliers,\n  registerSupplier,\n  getOneSupplier,\n  updateOrganisation,\n  getAllInventory,\n  updateProducts,\n  getOneProduct,\n  createInventory,\n  updateInventory,\n  getOneInventory,\n  deleteOrganisation,\n  getAllWarehouses,\n  getDashboardProducts,\n  getAllCustomers,\n  createProducts,\n  registerCustomer,\n  deleteProducts,\n  getOneCustomer,\n  updateCustomer,\n  deleteCustomer\n};\n\nfunction getDashboardStats() {\n  var _getAdminUtils;\n\n  const organization_id = (_getAdminUtils = getAdminUtils(\"admin_data\")) === null || _getAdminUtils === void 0 ? void 0 : _getAdminUtils.organisationId;\n  console.log(organization_id);\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/organisations/${organization_id}/clients`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_STATS_SUCCESS,\n      payload: data\n    });\n  };\n}\n\nfunction getAllOrganisation() {\n  return async dispatch => {\n    var _data$data;\n\n    const data = await Connector.get(`/super_admin/all-organization?per_page=${1}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_ORGANISATIONS_SUCCESS,\n      payload: data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.data\n    });\n  };\n}\n\nfunction getAllCustomers(pathname) {\n  return async dispatch => {\n    const data = await Connector.get(pathname);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_CUSTOMERS_SUCCESS,\n      payload: data === null || data === void 0 ? void 0 : data.data\n    });\n  };\n}\n\nfunction registerCustomer(formData) {\n  return async dispatch => {\n    const data = await Connector.post(`/super_admin/create-customer`, formData);\n\n    if (data) {\n      notify(\"successfully registered\");\n      reloadPage();\n    }\n  };\n}\n\nfunction getAllWarehouses(id) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/super_admin/all-warehouses/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_WAREHOUSES_SUCCESS,\n      payload: data\n    });\n  };\n}\n\nfunction getDashboardProducts(path) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`${path}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_PRODUCTS_SUCCESS,\n      payload: data\n    });\n  };\n}\n\nfunction getAllRoles() {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/roles`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_ROLES_SUCCESS,\n      payload: data\n    });\n  };\n}\n\nfunction editStaff(formData, id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.put(`/users/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\"); // reloadPage()\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction getOneOrganisation(id) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/super_admin/organization/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_ORGANISATION,\n      payload: data\n    });\n  };\n}\n\nfunction getOneInventory(id) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/inventories/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_INVENTORY,\n      payload: data\n    });\n  };\n}\n\nfunction getOneUser(id) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/users/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_USER,\n      payload: data\n    });\n  };\n}\n\nfunction getOneCustomer(id) {\n  return async dispatch => {\n    var _data$data2;\n\n    const data = await Connector.get(`/super_admin/customer/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GETONE_CUSTOMERS_SUCCESS,\n      payload: data === null || data === void 0 ? void 0 : (_data$data2 = data.data) === null || _data$data2 === void 0 ? void 0 : _data$data2.data\n    });\n  };\n}\n\nfunction getAllDrugs() {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/drugs`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_DRUGS_SUCCESS,\n      payload: data\n    });\n  };\n}\n\nfunction getAllAgentsCategories() {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/drugscategories`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_DRUGS_CATEGORY,\n      payload: data\n    });\n  };\n}\n\nfunction getAllManufacturers() {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/manufacturers`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_MANUFACTURERS,\n      payload: data\n    });\n  };\n}\n\nfunction getAllSuppliers() {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/suppliers`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_SUPLIERS,\n      payload: data\n    });\n  };\n}\n\nfunction getAllInventory() {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/inventories`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_INVENTORY,\n      payload: data\n    });\n  };\n}\n\nfunction getOneManufacturer(id) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/manufacturers/${id}`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_MANUFACTURER,\n      payload: data\n    });\n  };\n}\n\nfunction getOneProduct(id) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/items/${id}`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_PRODUCT,\n      payload: data\n    });\n  };\n}\n\nfunction getOneSupplier(id) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/suppliers/${id}`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_SUPPLIER,\n      payload: data\n    });\n  };\n}\n\nfunction registerManufacturer(formData) {\n  try {\n    return async dispatch => {\n      const data = await Connector.post(`/manufacturers`, formData);\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerSupplier(formData) {\n  try {\n    return async dispatch => {\n      const data = await Connector.post(`/suppliers`, formData);\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction updateManufacturer(formData, id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.put(`/manufacturers/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\n\nfunction updateCustomer(formData, id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.put(`/super_admin/customer/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\n\nfunction deleteCustomer(id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.delete(`/super_admin/customer/${id}`);\n      notify(\"Successfully deleted\");\n      reloadPage();\n    };\n  } catch (err) {\n    console.log(err);\n    notify(\"failed to process\");\n  }\n}\n\nfunction updateSuppliers(formData, id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.put(`/suppliers/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\n\nfunction updateInventory(formData, id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.put(`/inventories/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\n\nfunction createDrug(formData) {\n  try {\n    return async dispatch => {\n      const data = await Connector.post(`/drugs`, formData);\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction createInventory(formData) {\n  try {\n    return async dispatch => {\n      const data = await Connector.post(`/inventories`, formData);\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction createProducts(formData) {\n  try {\n    return async dispatch => {\n      const data = await ConnectForms.post(`/items/create`, formData);\n      console.log(data);\n\n      if (data) {\n        notify(\"Successfully created\");\n      } // reloadPage();\n\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction updateOrganisation(formData, id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.put(`/super_admin/organization/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction deleteOrganisation(id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.delete(`/super_admin/organization/${id}`);\n      notify(\"Successfully deleted\");\n      reloadPage();\n    };\n  } catch (err) {\n    console.log(err);\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerOrganisation(formData) {\n  try {\n    return async dispatch => {\n      const data = await Connector.post(`/super_admin/create-organization`, formData);\n      console.log(data);\n\n      if (data) {\n        notify(\"successfully created organisation\");\n      } // reloadPage();\n\n    };\n  } catch (err) {\n    console.log(err);\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerClient(formData) {\n  try {\n    return async dispatch => {\n      var _data$data3;\n\n      const data = await Connector.post(`/clients/register`, formData);\n      console.log(data);\n      notify(data === null || data === void 0 ? void 0 : (_data$data3 = data.data) === null || _data$data3 === void 0 ? void 0 : _data$data3.data);\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerStaff(formData) {\n  try {\n    return async dispatch => {\n      var _data$data4;\n\n      const data = await Connector.post(`/users/register`, formData);\n      console.log(data);\n      notify(data === null || data === void 0 ? void 0 : (_data$data4 = data.data) === null || _data$data4 === void 0 ? void 0 : _data$data4.data);\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction updateProducts(formData, id) {\n  try {\n    return async dispatch => {\n      const data = await ConnectForms.put(`/items/${id}`, formData);\n\n      if (data) {\n        console.log(data);\n        notify(\"Successfully updated\");\n        reloadPage();\n      }\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction deleteProducts(id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.delete(`/items/${id}`);\n\n      if (data) {\n        console.log(data);\n        notify(\"Successfully deleted\");\n        reloadPage();\n      }\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}","map":{"version":3,"sources":["/Users/frontenddev/Documents/FC INVENTORY/src/Actions/dashboard.action.js"],"names":["DashboardConstants","Connector","getAdminUtils","reloadPage","arrayMutators","FieldArray","notify","ConnectForms","dashboardActions","getDashboardStats","getAllRoles","registerOrganisation","getAllOrganisation","registerClient","registerStaff","getAllDrugs","getAllAgentsCategories","createDrug","getOneOrganisation","getOneUser","editStaff","getAllManufacturers","getOneManufacturer","registerManufacturer","updateManufacturer","updateSuppliers","getAllSuppliers","registerSupplier","getOneSupplier","updateOrganisation","getAllInventory","updateProducts","getOneProduct","createInventory","updateInventory","getOneInventory","deleteOrganisation","getAllWarehouses","getDashboardProducts","getAllCustomers","createProducts","registerCustomer","deleteProducts","getOneCustomer","updateCustomer","deleteCustomer","organization_id","organisationId","console","log","dispatch","data","get","type","DASHBOARD_STATS_SUCCESS","payload","DASHBOARD_ORGANISATIONS_SUCCESS","pathname","DASHBOARD_CUSTOMERS_SUCCESS","formData","post","id","DASHBOARD_WAREHOUSES_SUCCESS","path","DASHBOARD_PRODUCTS_SUCCESS","DASHBOARD_ROLES_SUCCESS","put","err","DASHBOARD_GET_ONE_ORGANISATION","DASHBOARD_GET_ONE_INVENTORY","DASHBOARD_GET_ONE_USER","DASHBOARD_GETONE_CUSTOMERS_SUCCESS","DASHBOARD_GET_DRUGS_SUCCESS","DASHBOARD_GET_DRUGS_CATEGORY","DASHBOARD_GET_MANUFACTURERS","DASHBOARD_GET_SUPLIERS","DASHBOARD_GET_INVENTORY","DASHBOARD_GET_ONE_MANUFACTURER","DASHBOARD_GET_ONE_PRODUCT","DASHBOARD_GET_ONE_SUPPLIER","delete"],"mappings":"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","sourcesContent":["import { DashboardConstants } from \"../constants/AdminConstants\";\nimport Connector from \"../Components/Services/services\";\nimport { getAdminUtils, reloadPage } from \"../Components/Services/helper\";\nimport arrayMutators from \"final-form-arrays\";\nimport { FieldArray } from \"react-final-form-arrays\";\nimport { notify } from \"../config\";\nimport ConnectForms from \"../Components/Services/ConnectForms\";\n\nexport const dashboardActions = {\n  getDashboardStats,\n  getAllRoles,\n  registerOrganisation,\n  getAllOrganisation,\n  registerClient,\n  registerStaff,\n  getAllDrugs,\n  getAllAgentsCategories,\n  createDrug,\n  getOneOrganisation,\n  getOneUser,\n  editStaff,\n  getAllManufacturers,\n  getOneManufacturer,\n  registerManufacturer,\n  updateManufacturer,\n  updateSuppliers,\n  getAllSuppliers,\n  registerSupplier,\n  getOneSupplier,\n  updateOrganisation,\n  getAllInventory,\n  updateProducts,\n  getOneProduct,\n  createInventory,\n  updateInventory,\n  getOneInventory,\n  deleteOrganisation,\n  getAllWarehouses,\n  getDashboardProducts,\n  getAllCustomers,\n  createProducts,\n  registerCustomer,\n  deleteProducts,\n  getOneCustomer,\n  updateCustomer,\n  deleteCustomer\n};\n\nfunction getDashboardStats() {\n  const organization_id = getAdminUtils(\"admin_data\")?.organisationId;\n  console.log(organization_id);\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/organisations/${organization_id}/clients`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_STATS_SUCCESS,\n      payload: data,\n    });\n  };\n}\n\nfunction getAllOrganisation() {\n  return async (dispatch) => {\n    const data = await Connector.get(\n      `/super_admin/all-organization?per_page=${1}`\n    );\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_ORGANISATIONS_SUCCESS,\n      payload: data?.data?.data,\n    });\n  };\n}\nfunction getAllCustomers(pathname) {\n  return async (dispatch) => {\n    const data = await Connector.get(pathname);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_CUSTOMERS_SUCCESS,\n      payload: data?.data,\n    });\n  };\n}\nfunction registerCustomer(formData) {\n  return async (dispatch) => {\n    const data = await Connector.post(`/super_admin/create-customer`, formData)\n    if (data) {\n      notify(\"successfully registered\");\n      reloadPage();\n    }\n  };\n}\nfunction getAllWarehouses(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/super_admin/all-warehouses/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_WAREHOUSES_SUCCESS,\n      payload: data,\n    });\n  };\n}\n\nfunction getDashboardProducts(path) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`${path}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_PRODUCTS_SUCCESS,\n      payload: data,\n    });\n  };\n}\nfunction getAllRoles() {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/roles`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_ROLES_SUCCESS,\n      payload: data,\n    });\n  };\n}\n\nfunction editStaff(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(`/users/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      // reloadPage()\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\nfunction getOneOrganisation(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/super_admin/organization/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_ORGANISATION,\n      payload: data,\n    });\n  };\n}\nfunction getOneInventory(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/inventories/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_INVENTORY,\n      payload: data,\n    });\n  };\n}\n\nfunction getOneUser(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/users/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_USER,\n      payload: data,\n    });\n  };\n}\n\n\n\nfunction getOneCustomer(id) {\n  return async (dispatch) => {\n    const data = await Connector.get(`/super_admin/customer/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GETONE_CUSTOMERS_SUCCESS,\n      payload: data?.data?.data,\n    });\n  };\n}\nfunction getAllDrugs() {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/drugs`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_DRUGS_SUCCESS,\n      payload: data,\n    });\n  };\n}\nfunction getAllAgentsCategories() {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/drugscategories`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_DRUGS_CATEGORY,\n      payload: data,\n    });\n  };\n}\nfunction getAllManufacturers() {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/manufacturers`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_MANUFACTURERS,\n      payload: data,\n    });\n  };\n}\nfunction getAllSuppliers() {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/suppliers`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_SUPLIERS,\n      payload: data,\n    });\n  };\n}\nfunction getAllInventory() {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/inventories`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_INVENTORY,\n      payload: data,\n    });\n  };\n}\n\nfunction getOneManufacturer(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/manufacturers/${id}`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_MANUFACTURER,\n      payload: data,\n    });\n  };\n}\nfunction getOneProduct(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/items/${id}`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_PRODUCT,\n      payload: data,\n    });\n  };\n}\nfunction getOneSupplier(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/suppliers/${id}`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_SUPPLIER,\n      payload: data,\n    });\n  };\n}\n\nfunction registerManufacturer(formData) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.post(`/manufacturers`, formData);\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\nfunction registerSupplier(formData) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.post(`/suppliers`, formData);\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction updateManufacturer(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(`/manufacturers/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\nfunction updateCustomer(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(`/super_admin/customer/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\n\nfunction deleteCustomer(id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.delete(`/super_admin/customer/${id}`);\n      notify(\"Successfully deleted\");\n      reloadPage();\n    };\n  } catch (err) {\n    console.log(err);\n    notify(\"failed to process\");\n  }\n}\n\nfunction updateSuppliers(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(`/suppliers/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\nfunction updateInventory(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(`/inventories/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\n\nfunction createDrug(formData) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.post(`/drugs`, formData);\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction createInventory(formData) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.post(`/inventories`, formData);\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction createProducts(formData) {\n  try {\n    return async (dispatch) => {\n      const data = await ConnectForms.post(`/items/create`, formData);\n      console.log(data);\n      if (data) {\n        notify(\"Successfully created\");\n      }\n      // reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction updateOrganisation(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(\n        `/super_admin/organization/${id}`,\n        formData\n      );\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction deleteOrganisation(id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.delete(`/super_admin/organization/${id}`);\n      notify(\"Successfully deleted\");\n      reloadPage();\n    };\n  } catch (err) {\n    console.log(err);\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerOrganisation(formData) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.post(\n        `/super_admin/create-organization`,\n        formData\n      );\n      console.log(data);\n      if (data) {\n        notify(\"successfully created organisation\");\n      }\n      // reloadPage();\n    };\n  } catch (err) {\n    console.log(err);\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerClient(formData) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.post(`/clients/register`, formData);\n      console.log(data);\n      notify(data?.data?.data);\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerStaff(formData) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.post(`/users/register`, formData);\n      console.log(data);\n      notify(data?.data?.data);\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\nfunction updateProducts(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await ConnectForms.put(`/items/${id}`, formData);\n      if (data) {\n        console.log(data);\n        notify(\"Successfully updated\");\n        reloadPage();\n      }\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\nfunction deleteProducts(id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.delete(`/items/${id}`);\n      if (data) {\n        console.log(data);\n        notify(\"Successfully deleted\");\n        reloadPage();\n      }\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n"]},"metadata":{},"sourceType":"module"}