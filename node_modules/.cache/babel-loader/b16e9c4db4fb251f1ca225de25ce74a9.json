{"ast":null,"code":"import { DashboardConstants } from \"../constants/AdminConstants\";\nimport Connector from \"../Components/Services/services\";\nimport { getAdminUtils, reloadPage } from \"../Components/Services/helper\";\nimport arrayMutators from \"final-form-arrays\";\nimport { FieldArray } from \"react-final-form-arrays\";\nimport { notify } from \"../config\";\nimport ConnectForms from \"../Components/Services/ConnectForms\";\nexport const dashboardActions = {\n  getDashboardStats,\n  getAllRoles,\n  registerOrganisation,\n  getAllOrganisation,\n  registerClient,\n  registerStaff,\n  getAllDrugs,\n  getAllAgentsCategories,\n  createDrug,\n  getOneOrganisation,\n  getOneUser,\n  editStaff,\n  getAllManufacturers,\n  getOneManufacturer,\n  registerManufacturer,\n  updateManufacturer,\n  updateSuppliers,\n  getAllSuppliers,\n  registerSupplier,\n  getOneSupplier,\n  updateOrganisation,\n  getAllInventory,\n  updateProducts,\n  getOneProduct,\n  createInventory,\n  updateInventory,\n  getOneInventory,\n  updateVendor,\n  updateAgent,\n  deleteOrganisation,\n  getAllWarehouses,\n  getDashboardProducts,\n  getAllAgents,\n  getAllCustomers,\n  createProducts,\n  registerCustomer,\n  registerAgent,\n  deleteProducts,\n  getOneCustomer,\n  updateCustomer,\n  deleteCustomer,\n  deleteVendor,\n  getOneAgent,\n  deleteDriver,\n  deleteAgent,\n  getAllVendors,\n  getOneVendor,\n  addVendor,\n  deletePurchase,\n  registerPurchase,\n  getAllSales,\n  getDrivers,\n  registerDriver,\n  getOneDriver,\n  updateDriver\n};\n\nfunction getDashboardStats() {\n  var _getAdminUtils;\n\n  const organization_id = (_getAdminUtils = getAdminUtils(\"admin_data\")) === null || _getAdminUtils === void 0 ? void 0 : _getAdminUtils.organisationId;\n  console.log(organization_id);\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/organisations/${organization_id}/clients`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_STATS_SUCCESS,\n      payload: data\n    });\n  };\n}\n\nfunction getAllOrganisation() {\n  return async dispatch => {\n    var _data$data;\n\n    const data = await Connector.get(`/super_admin/all-organization?per_page=${1}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_ORGANISATIONS_SUCCESS,\n      payload: data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.data\n    });\n  };\n}\n\nfunction getAllAgents(pathname) {\n  return async dispatch => {\n    const data = await Connector.get(pathname);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_AGENTS_SUCCESS,\n      payload: data === null || data === void 0 ? void 0 : data.data\n    });\n  };\n}\n\nfunction getAllCustomers(pathname) {\n  return async dispatch => {\n    const data = await Connector.get(pathname);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_CUSTOMERS_SUCCESS,\n      payload: data === null || data === void 0 ? void 0 : data.data\n    });\n  };\n}\n\nfunction getAllVendors(pathname) {\n  return async dispatch => {\n    const data = await Connector.get(pathname);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_VENDORS_SUCCESS,\n      payload: data === null || data === void 0 ? void 0 : data.data\n    });\n  };\n}\n\nfunction getDrivers(pathname) {\n  return async dispatch => {\n    const data = await Connector.get(pathname);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_DRIVERS_SUCCESS,\n      payload: data === null || data === void 0 ? void 0 : data.data\n    });\n  };\n}\n\nfunction registerCustomer(formData) {\n  return async dispatch => {\n    const data = await Connector.post(`/super_admin/create-customer`, formData);\n\n    if (data) {\n      notify(\"successfully registered\");\n      reloadPage();\n    }\n  };\n}\n\nfunction registerPurchase(formData) {\n  return async dispatch => {\n    const data = await Connector.post(`/zoho/orders/create`, formData);\n\n    if (data) {\n      notify(\"successfully registered\");\n      reloadPage();\n    }\n  };\n}\n\nfunction addVendor(formData) {\n  return async dispatch => {\n    const data = await Connector.post(`/super_admin/create-vendor`, formData);\n\n    if (data) {\n      notify(\"successfully registered\");\n      reloadPage();\n    }\n  };\n}\n\nfunction registerDriver(formData) {\n  return async dispatch => {\n    const data = await Connector.post(`/super_admin/create-driver`, formData);\n\n    if (data) {\n      notify(\"successfully registered\");\n      reloadPage();\n    }\n  };\n}\n\nfunction registerAgent(formData) {\n  return async dispatch => {\n    const data = await Connector.post(`/super_admin/create-salesagent`, formData);\n\n    if (data) {\n      notify(\"successfully registered\");\n      reloadPage();\n    }\n  };\n}\n\nfunction getAllSales(pathname) {\n  return async dispatch => {\n    const data = await Connector.get(pathname);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_SALES_SUCCESS,\n      payload: data === null || data === void 0 ? void 0 : data.data\n    });\n  };\n}\n\nfunction getAllWarehouses(id) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/super_admin/all-warehouses/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_WAREHOUSES_SUCCESS,\n      payload: data\n    });\n  };\n}\n\nfunction getDashboardProducts(path) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`${path}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_PRODUCTS_SUCCESS,\n      payload: data\n    });\n  };\n}\n\nfunction getAllRoles() {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/roles`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_ROLES_SUCCESS,\n      payload: data\n    });\n  };\n}\n\nfunction editStaff(formData, id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.put(`/users/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\"); // reloadPage()\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction getOneOrganisation(id) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/super_admin/organization/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_ORGANISATION,\n      payload: data\n    });\n  };\n}\n\nfunction getOneSale(id) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/super_admin/organization/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_ORGANISATION,\n      payload: data\n    });\n  };\n}\n\nfunction getOneAgent(id) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/super_admin/salesagent/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_AGENT,\n      payload: data\n    });\n  };\n}\n\nfunction getOneVendor(id) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/super_admin/vendor/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_VENDOR,\n      payload: data\n    });\n  };\n}\n\nfunction getOneInventory(id) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/inventories/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_INVENTORY,\n      payload: data\n    });\n  };\n}\n\nfunction getOneUser(id) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/users/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_USER,\n      payload: data\n    });\n  };\n}\n\nfunction getOneCustomer(id) {\n  return async dispatch => {\n    var _data$data2;\n\n    const data = await Connector.get(`/super_admin/customer/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GETONE_CUSTOMERS_SUCCESS,\n      payload: data === null || data === void 0 ? void 0 : (_data$data2 = data.data) === null || _data$data2 === void 0 ? void 0 : _data$data2.data\n    });\n  };\n}\n\nfunction getOneDriver(id) {\n  return async dispatch => {\n    var _data$data3;\n\n    const data = await Connector.get(`/super_admin/driver/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GETONE_DRIVER_SUCCESS,\n      payload: data === null || data === void 0 ? void 0 : (_data$data3 = data.data) === null || _data$data3 === void 0 ? void 0 : _data$data3.data\n    });\n  };\n}\n\nfunction getAllDrugs() {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/drugs`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_DRUGS_SUCCESS,\n      payload: data\n    });\n  };\n}\n\nfunction getAllAgentsCategories() {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/drugscategories`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_DRUGS_CATEGORY,\n      payload: data\n    });\n  };\n}\n\nfunction getAllManufacturers(pathname) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(pathname);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_MANUFACTURERS,\n      payload: data\n    });\n  };\n}\n\nfunction getAllSuppliers() {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/suppliers`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_SUPLIERS,\n      payload: data\n    });\n  };\n}\n\nfunction getAllInventory() {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/inventories`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_INVENTORY,\n      payload: data\n    });\n  };\n}\n\nfunction getOneManufacturer(id) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/manufacturers/${id}`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_MANUFACTURER,\n      payload: data\n    });\n  };\n}\n\nfunction getOneProduct(id) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/items/${id}`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_PRODUCT,\n      payload: data\n    });\n  };\n}\n\nfunction getOneSupplier(id) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/suppliers/${id}`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_SUPPLIER,\n      payload: data\n    });\n  };\n}\n\nfunction registerManufacturer(formData) {\n  try {\n    return async dispatch => {\n      const data = await Connector.post(`/manufacturers`, formData);\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerSupplier(formData) {\n  try {\n    return async dispatch => {\n      const data = await Connector.post(`/suppliers`, formData);\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction updateManufacturer(formData, id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.put(`/manufacturers/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\n\nfunction updateVendor(formData, id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.put(`/super_admin/vendor/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\n\nfunction updateAgent(formData, id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.put(`/super_admin/salesagent/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\n\nfunction updateCustomer(formData, id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.put(`/super_admin/customer/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\n\nfunction updateDriver(formData, id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.put(`/super_admin/driver/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\n\nfunction deleteCustomer(id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.delete(`/super_admin/customer/${id}`);\n      notify(\"Successfully deleted\");\n      reloadPage();\n    };\n  } catch (err) {\n    console.log(err);\n    notify(\"failed to process\");\n  }\n}\n\nfunction deleteDriver(id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.delete(`/super_admin/driver/${id}`);\n      notify(\"Successfully deleted\");\n      reloadPage();\n    };\n  } catch (err) {\n    console.log(err);\n    notify(\"failed to process\");\n  }\n}\n\nfunction deletePurchase(id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.delete(`/super_admin/customer/${id}`);\n      notify(\"Successfully deleted\");\n      reloadPage();\n    };\n  } catch (err) {\n    console.log(err);\n    notify(\"failed to process\");\n  }\n}\n\nfunction deleteVendor(id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.delete(`/super_admin/vendor/${id}`);\n      notify(\"Successfully deleted\");\n      reloadPage();\n    };\n  } catch (err) {\n    console.log(err);\n    notify(\"failed to process\");\n  }\n}\n\nfunction updateSuppliers(formData, id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.put(`/suppliers/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\n\nfunction updateInventory(formData, id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.put(`/inventories/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\n\nfunction createDrug(formData) {\n  try {\n    return async dispatch => {\n      const data = await Connector.post(`/drugs`, formData);\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction createInventory(formData) {\n  try {\n    return async dispatch => {\n      const data = await Connector.post(`/inventories`, formData);\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction createProducts(formData) {\n  try {\n    var _getAdminUtils2, _getAdminUtils4;\n\n    if (((_getAdminUtils2 = getAdminUtils(\"admin_data\")) === null || _getAdminUtils2 === void 0 ? void 0 : _getAdminUtils2.role_name) == \"super_admin\") {\n      var _getAdminUtils3;\n\n      const c_id = ((_getAdminUtils3 = getAdminUtils(\"admin_data\")) === null || _getAdminUtils3 === void 0 ? void 0 : _getAdminUtils3.role_name) == \"super_admin\";\n      return async dispatch => {\n        const data = await ConnectForms.post(`/super_admin/create-product`, formData);\n        console.log(data);\n\n        if (data) {\n          notify(\"Successfully created\");\n        }\n      };\n    }\n\n    if (((_getAdminUtils4 = getAdminUtils(\"admin_data\")) === null || _getAdminUtils4 === void 0 ? void 0 : _getAdminUtils4.role_name) == \"admin\") {\n      var _getAdminUtils5;\n\n      const c_id = ((_getAdminUtils5 = getAdminUtils(\"admin_data\")) === null || _getAdminUtils5 === void 0 ? void 0 : _getAdminUtils5.role_name) == \"admin\";\n      return async dispatch => {\n        const data = await ConnectForms.post(`/admin/create-product`, formData);\n        console.log(data);\n\n        if (data) {\n          notify(\"Successfully created\");\n        }\n      };\n    }\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction updateOrganisation(formData, id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.put(`/super_admin/organization/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction deleteOrganisation(id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.delete(`/super_admin/organization/${id}`);\n      notify(\"Successfully deleted\");\n      reloadPage();\n    };\n  } catch (err) {\n    console.log(err);\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerOrganisation(formData) {\n  try {\n    return async dispatch => {\n      const data = await Connector.post(`/super_admin/create-organization`, formData);\n      console.log(data);\n\n      if (data) {\n        notify(\"successfully created organisation\");\n      } // reloadPage();\n\n    };\n  } catch (err) {\n    console.log(err);\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerClient(formData) {\n  try {\n    return async dispatch => {\n      var _data$data4;\n\n      const data = await Connector.post(`/clients/register`, formData);\n      console.log(data);\n      notify(data === null || data === void 0 ? void 0 : (_data$data4 = data.data) === null || _data$data4 === void 0 ? void 0 : _data$data4.data);\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerStaff(formData) {\n  try {\n    return async dispatch => {\n      var _data$data5;\n\n      const data = await Connector.post(`/users/register`, formData);\n      console.log(data);\n      notify(data === null || data === void 0 ? void 0 : (_data$data5 = data.data) === null || _data$data5 === void 0 ? void 0 : _data$data5.data);\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction updateProducts(formData, id) {\n  try {\n    return async dispatch => {\n      const data = await ConnectForms.post(`/items/${id}`, formData);\n\n      if (data) {\n        console.log(data);\n        notify(\"Successfully updated\"); // reloadPage();\n      }\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction deleteProducts(id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.delete(`/items/${id}`);\n\n      if (data) {\n        console.log(data);\n        notify(\"Successfully deleted\");\n        reloadPage();\n      }\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction deleteAgent(id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.delete(`/super_admin/salesagent/${id}`);\n\n      if (data) {\n        console.log(data);\n        notify(\"Successfully deleted\");\n        reloadPage();\n      }\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}","map":{"version":3,"sources":["/Users/frontenddev/Documents/FC INVENTORY/src/Actions/dashboard.action.js"],"names":["DashboardConstants","Connector","getAdminUtils","reloadPage","arrayMutators","FieldArray","notify","ConnectForms","dashboardActions","getDashboardStats","getAllRoles","registerOrganisation","getAllOrganisation","registerClient","registerStaff","getAllDrugs","getAllAgentsCategories","createDrug","getOneOrganisation","getOneUser","editStaff","getAllManufacturers","getOneManufacturer","registerManufacturer","updateManufacturer","updateSuppliers","getAllSuppliers","registerSupplier","getOneSupplier","updateOrganisation","getAllInventory","updateProducts","getOneProduct","createInventory","updateInventory","getOneInventory","updateVendor","updateAgent","deleteOrganisation","getAllWarehouses","getDashboardProducts","getAllAgents","getAllCustomers","createProducts","registerCustomer","registerAgent","deleteProducts","getOneCustomer","updateCustomer","deleteCustomer","deleteVendor","getOneAgent","deleteDriver","deleteAgent","getAllVendors","getOneVendor","addVendor","deletePurchase","registerPurchase","getAllSales","getDrivers","registerDriver","getOneDriver","updateDriver","organization_id","organisationId","console","log","dispatch","data","get","type","DASHBOARD_STATS_SUCCESS","payload","DASHBOARD_ORGANISATIONS_SUCCESS","pathname","DASHBOARD_AGENTS_SUCCESS","DASHBOARD_CUSTOMERS_SUCCESS","DASHBOARD_VENDORS_SUCCESS","DASHBOARD_DRIVERS_SUCCESS","formData","post","DASHBOARD_SALES_SUCCESS","id","DASHBOARD_WAREHOUSES_SUCCESS","path","DASHBOARD_PRODUCTS_SUCCESS","DASHBOARD_ROLES_SUCCESS","put","err","DASHBOARD_GET_ONE_ORGANISATION","getOneSale","DASHBOARD_GET_ONE_AGENT","DASHBOARD_GET_ONE_VENDOR","DASHBOARD_GET_ONE_INVENTORY","DASHBOARD_GET_ONE_USER","DASHBOARD_GETONE_CUSTOMERS_SUCCESS","DASHBOARD_GETONE_DRIVER_SUCCESS","DASHBOARD_GET_DRUGS_SUCCESS","DASHBOARD_GET_DRUGS_CATEGORY","DASHBOARD_GET_MANUFACTURERS","DASHBOARD_GET_SUPLIERS","DASHBOARD_GET_INVENTORY","DASHBOARD_GET_ONE_MANUFACTURER","DASHBOARD_GET_ONE_PRODUCT","DASHBOARD_GET_ONE_SUPPLIER","delete","role_name","c_id"],"mappings":"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","sourcesContent":["import { DashboardConstants } from \"../constants/AdminConstants\";\nimport Connector from \"../Components/Services/services\";\nimport { getAdminUtils, reloadPage } from \"../Components/Services/helper\";\nimport arrayMutators from \"final-form-arrays\";\nimport { FieldArray } from \"react-final-form-arrays\";\nimport { notify } from \"../config\";\nimport ConnectForms from \"../Components/Services/ConnectForms\";\n\nexport const dashboardActions = {\n  getDashboardStats,\n  getAllRoles,\n  registerOrganisation,\n  getAllOrganisation,\n  registerClient,\n  registerStaff,\n  getAllDrugs,\n  getAllAgentsCategories,\n  createDrug,\n  getOneOrganisation,\n  getOneUser,\n  editStaff,\n  getAllManufacturers,\n  getOneManufacturer,\n  registerManufacturer,\n  updateManufacturer,\n  updateSuppliers,\n  getAllSuppliers,\n  registerSupplier,\n  getOneSupplier,\n  updateOrganisation,\n  getAllInventory,\n  updateProducts,\n  getOneProduct,\n  createInventory,\n  updateInventory,\n  getOneInventory,\n  updateVendor,\n  updateAgent,\n  deleteOrganisation,\n  getAllWarehouses,\n  getDashboardProducts,\n  getAllAgents,\n  getAllCustomers,\n  createProducts,\n  registerCustomer,\n  registerAgent,\n  deleteProducts,\n  getOneCustomer,\n  updateCustomer,\n  deleteCustomer,\n  deleteVendor,\n  getOneAgent,\n  deleteDriver,\n  deleteAgent,\n  getAllVendors,\n  getOneVendor,\n  addVendor,\n  deletePurchase,\n  registerPurchase,\n  getAllSales,\n  getDrivers,\n  registerDriver,\n  getOneDriver,\n  updateDriver,\n};\n\nfunction getDashboardStats() {\n  const organization_id = getAdminUtils(\"admin_data\")?.organisationId;\n  console.log(organization_id);\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/organisations/${organization_id}/clients`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_STATS_SUCCESS,\n      payload: data,\n    });\n  };\n}\n\nfunction getAllOrganisation() {\n  return async (dispatch) => {\n    const data = await Connector.get(\n      `/super_admin/all-organization?per_page=${1}`\n    );\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_ORGANISATIONS_SUCCESS,\n      payload: data?.data?.data,\n    });\n  };\n}\n\nfunction getAllAgents(pathname) {\n  return async (dispatch) => {\n    const data = await Connector.get(pathname);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_AGENTS_SUCCESS,\n      payload: data?.data,\n    });\n  };\n}\n\nfunction getAllCustomers(pathname) {\n  return async (dispatch) => {\n    const data = await Connector.get(pathname);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_CUSTOMERS_SUCCESS,\n      payload: data?.data,\n    });\n  };\n}\n\nfunction getAllVendors(pathname) {\n  return async (dispatch) => {\n    const data = await Connector.get(pathname);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_VENDORS_SUCCESS,\n      payload: data?.data,\n    });\n  };\n}\nfunction getDrivers(pathname) {\n  return async (dispatch) => {\n    const data = await Connector.get(pathname);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_DRIVERS_SUCCESS,\n      payload: data?.data,\n    });\n  };\n}\n\nfunction registerCustomer(formData) {\n  return async (dispatch) => {\n    const data = await Connector.post(`/super_admin/create-customer`, formData);\n    if (data) {\n      notify(\"successfully registered\");\n      reloadPage();\n    }\n  };\n}\n\nfunction registerPurchase(formData) {\n  return async (dispatch) => {\n    const data = await Connector.post(`/zoho/orders/create`, formData);\n    if (data) {\n      notify(\"successfully registered\");\n      reloadPage();\n    }\n  };\n}\n\nfunction addVendor(formData) {\n  return async (dispatch) => {\n    const data = await Connector.post(`/super_admin/create-vendor`, formData);\n    if (data) {\n      notify(\"successfully registered\");\n      reloadPage();\n    }\n  };\n}\nfunction registerDriver(formData) {\n  return async (dispatch) => {\n    const data = await Connector.post(`/super_admin/create-driver`, formData);\n    if (data) {\n      notify(\"successfully registered\");\n      reloadPage();\n    }\n  };\n}\n\nfunction registerAgent(formData) {\n  return async (dispatch) => {\n    const data = await Connector.post(\n      `/super_admin/create-salesagent`,\n      formData\n    );\n    if (data) {\n      notify(\"successfully registered\");\n      reloadPage();\n    }\n  };\n}\n\nfunction getAllSales(pathname) {\n  return async (dispatch) => {\n    const data = await Connector.get(pathname);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_SALES_SUCCESS,\n      payload: data?.data,\n    });\n  };\n}\n\nfunction getAllWarehouses(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/super_admin/all-warehouses/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_WAREHOUSES_SUCCESS,\n      payload: data,\n    });\n  };\n}\n\nfunction getDashboardProducts(path) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`${path}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_PRODUCTS_SUCCESS,\n      payload: data,\n    });\n  };\n}\nfunction getAllRoles() {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/roles`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_ROLES_SUCCESS,\n      payload: data,\n    });\n  };\n}\n\nfunction editStaff(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(`/users/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      // reloadPage()\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\nfunction getOneOrganisation(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/super_admin/organization/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_ORGANISATION,\n      payload: data,\n    });\n  };\n}\nfunction getOneSale(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/super_admin/organization/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_ORGANISATION,\n      payload: data,\n    });\n  };\n}\n\nfunction getOneAgent(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/super_admin/salesagent/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_AGENT,\n      payload: data,\n    });\n  };\n}\nfunction getOneVendor(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/super_admin/vendor/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_VENDOR,\n      payload: data,\n    });\n  };\n}\n\nfunction getOneInventory(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/inventories/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_INVENTORY,\n      payload: data,\n    });\n  };\n}\n\nfunction getOneUser(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/users/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_USER,\n      payload: data,\n    });\n  };\n}\n\nfunction getOneCustomer(id) {\n  return async (dispatch) => {\n    const data = await Connector.get(`/super_admin/customer/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GETONE_CUSTOMERS_SUCCESS,\n      payload: data?.data?.data,\n    });\n  };\n}\nfunction getOneDriver(id) {\n  return async (dispatch) => {\n    const data = await Connector.get(`/super_admin/driver/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GETONE_DRIVER_SUCCESS,\n      payload: data?.data?.data,\n    });\n  };\n}\nfunction getAllDrugs() {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/drugs`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_DRUGS_SUCCESS,\n      payload: data,\n    });\n  };\n}\nfunction getAllAgentsCategories() {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/drugscategories`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_DRUGS_CATEGORY,\n      payload: data,\n    });\n  };\n}\nfunction getAllManufacturers(pathname) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(pathname);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_MANUFACTURERS,\n      payload: data,\n    });\n  };\n}\nfunction getAllSuppliers() {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/suppliers`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_SUPLIERS,\n      payload: data,\n    });\n  };\n}\nfunction getAllInventory() {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/inventories`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_INVENTORY,\n      payload: data,\n    });\n  };\n}\n\nfunction getOneManufacturer(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/manufacturers/${id}`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_MANUFACTURER,\n      payload: data,\n    });\n  };\n}\nfunction getOneProduct(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/items/${id}`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_PRODUCT,\n      payload: data,\n    });\n  };\n}\nfunction getOneSupplier(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/suppliers/${id}`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_SUPPLIER,\n      payload: data,\n    });\n  };\n}\n\nfunction registerManufacturer(formData) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.post(`/manufacturers`, formData);\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\nfunction registerSupplier(formData) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.post(`/suppliers`, formData);\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction updateManufacturer(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(`/manufacturers/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\nfunction updateVendor(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(`/super_admin/vendor/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\n\nfunction updateAgent(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(\n        `/super_admin/salesagent/${id}`,\n        formData\n      );\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\nfunction updateCustomer(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(`/super_admin/customer/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\nfunction updateDriver(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(`/super_admin/driver/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\n\nfunction deleteCustomer(id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.delete(`/super_admin/customer/${id}`);\n      notify(\"Successfully deleted\");\n      reloadPage();\n    };\n  } catch (err) {\n    console.log(err);\n    notify(\"failed to process\");\n  }\n}\nfunction deleteDriver(id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.delete(`/super_admin/driver/${id}`);\n      notify(\"Successfully deleted\");\n      reloadPage();\n    };\n  } catch (err) {\n    console.log(err);\n    notify(\"failed to process\");\n  }\n}\nfunction deletePurchase(id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.delete(`/super_admin/customer/${id}`);\n      notify(\"Successfully deleted\");\n      reloadPage();\n    };\n  } catch (err) {\n    console.log(err);\n    notify(\"failed to process\");\n  }\n}\n\nfunction deleteVendor(id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.delete(`/super_admin/vendor/${id}`);\n      notify(\"Successfully deleted\");\n      reloadPage();\n    };\n  } catch (err) {\n    console.log(err);\n    notify(\"failed to process\");\n  }\n}\n\nfunction updateSuppliers(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(`/suppliers/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\nfunction updateInventory(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(`/inventories/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\n\nfunction createDrug(formData) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.post(`/drugs`, formData);\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction createInventory(formData) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.post(`/inventories`, formData);\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction createProducts(formData) {\n  try {\n    if (getAdminUtils(\"admin_data\")?.role_name == \"super_admin\") {\n      const c_id = getAdminUtils(\"admin_data\")?.role_name == \"super_admin\";\n      return async (dispatch) => {\n        const data = await ConnectForms.post(\n          `/super_admin/create-product`,\n          formData\n        );\n        console.log(data);\n        if (data) {\n          notify(\"Successfully created\");\n        }\n      };\n    }\n    if (getAdminUtils(\"admin_data\")?.role_name == \"admin\") {\n      const c_id = getAdminUtils(\"admin_data\")?.role_name == \"admin\";\n      return async (dispatch) => {\n        const data = await ConnectForms.post(`/admin/create-product`, formData);\n        console.log(data);\n        if (data) {\n          notify(\"Successfully created\");\n        }\n      };\n    }\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction updateOrganisation(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(\n        `/super_admin/organization/${id}`,\n        formData\n      );\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction deleteOrganisation(id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.delete(`/super_admin/organization/${id}`);\n      notify(\"Successfully deleted\");\n      reloadPage();\n    };\n  } catch (err) {\n    console.log(err);\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerOrganisation(formData) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.post(\n        `/super_admin/create-organization`,\n        formData\n      );\n      console.log(data);\n      if (data) {\n        notify(\"successfully created organisation\");\n      }\n      // reloadPage();\n    };\n  } catch (err) {\n    console.log(err);\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerClient(formData) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.post(`/clients/register`, formData);\n      console.log(data);\n      notify(data?.data?.data);\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerStaff(formData) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.post(`/users/register`, formData);\n      console.log(data);\n      notify(data?.data?.data);\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction updateProducts(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await ConnectForms.post(`/items/${id}`, formData);\n      if (data) {\n        console.log(data);\n        notify(\"Successfully updated\");\n        // reloadPage();\n      }\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction deleteProducts(id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.delete(`/items/${id}`);\n      if (data) {\n        console.log(data);\n        notify(\"Successfully deleted\");\n        reloadPage();\n      }\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction deleteAgent(id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.delete(`/super_admin/salesagent/${id}`);\n      if (data) {\n        console.log(data);\n        notify(\"Successfully deleted\");\n        reloadPage();\n      }\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n"]},"metadata":{},"sourceType":"module"}