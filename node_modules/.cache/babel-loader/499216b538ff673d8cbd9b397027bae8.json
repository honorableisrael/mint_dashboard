{"ast":null,"code":"import axios from\"axios\";import{root}from\"../../config\";import{getToken,errorHandler}from\"./helper\";var ConnectForms=axios.create();ConnectForms.interceptors.request.use(function(config){config.baseURL=root;config.headers['Authorization']=getToken()&&\"Bearer \".concat(getToken());config.headers['Content-Type']='multipart/form-data';config.headers['Accept']='multipart/form-data';return config;},function(error){return Promise.reject(error);});ConnectForms.interceptors.response.use(function(response){return response;},function(error){errorHandler(error);});export default ConnectForms;","map":{"version":3,"sources":["/Users/frontenddev/Documents/FC INVENTORY/src/Components/Services/ConnectForms.ts"],"names":["axios","root","getToken","errorHandler","ConnectForms","create","interceptors","request","use","config","baseURL","headers","error","Promise","reject","response"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,KAAqB,cAArB,CACA,OAASC,QAAT,CAAmBC,YAAnB,KAAuC,UAAvC,CAEA,GAAMC,CAAAA,YAAY,CAAGJ,KAAK,CAACK,MAAN,EAArB,CAEAD,YAAY,CAACE,YAAb,CAA0BC,OAA1B,CAAkCC,GAAlC,CAAsC,SAAAC,MAAM,CAAI,CAC5CA,MAAM,CAACC,OAAP,CAAiBT,IAAjB,CACAQ,MAAM,CAACE,OAAP,CAAe,eAAf,EAAkCT,QAAQ,qBAAgBA,QAAQ,EAAxB,CAA1C,CACAO,MAAM,CAACE,OAAP,CAAe,cAAf,EAAiC,qBAAjC,CACAF,MAAM,CAACE,OAAP,CAAe,QAAf,EAA2B,qBAA3B,CACA,MAAOF,CAAAA,MAAP,CACH,CAND,CAMG,SAAAG,KAAK,CAAI,CACR,MAAOC,CAAAA,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP,CACH,CARD,EAUAR,YAAY,CAACE,YAAb,CAA0BS,QAA1B,CAAmCP,GAAnC,CAAuC,SAAAO,QAAQ,CAAI,CAC/C,MAAOA,CAAAA,QAAP,CACH,CAFD,CAEG,SAAAH,KAAK,CAAI,CACRT,YAAY,CAACS,KAAD,CAAZ,CACH,CAJD,EAMA,cAAeR,CAAAA,YAAf","sourcesContent":["import axios from \"axios\";\nimport { root } from \"../../config\";\nimport { getToken, errorHandler } from \"./helper\";\n\nconst ConnectForms = axios.create();\n\nConnectForms.interceptors.request.use(config => {\n    config.baseURL = root;\n    config.headers['Authorization'] = getToken() && `Bearer ${getToken()}`;\n    config.headers['Content-Type'] = 'multipart/form-data';\n    config.headers['Accept'] = 'multipart/form-data';\n    return config\n}, error => {\n    return Promise.reject(error)\n})\n\nConnectForms.interceptors.response.use(response => {\n    return response\n}, error => {\n    errorHandler(error)\n})\n\nexport default ConnectForms;"]},"metadata":{},"sourceType":"module"}