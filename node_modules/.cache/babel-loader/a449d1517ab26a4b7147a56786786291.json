{"ast":null,"code":"import { DashboardConstants } from \"../constants/AdminConstants\";\nimport Connector from '../Components/Services/services';\nimport { getAdminUtils, reloadPage } from '../Components/Services/helper';\nimport { notify } from \"../config\";\nexport const dashboardActions = {\n  getDashboardStats,\n  getAllRoles,\n  getAllStaffs,\n  registerOrganisation,\n  getAllOrganisation,\n  registerClient,\n  registerStaff,\n  getAllDrugs,\n  getAllDrugsCategories,\n  createDrug,\n  getOneDrug,\n  getOneUser,\n  editStaff,\n  getAllManufacturers,\n  getOneManufacturer,\n  registerManufacturer,\n  updateManufacturer,\n  updateSuppliers,\n  getAllSuppliers,\n  registerSupplier,\n  getOneSupplier,\n  updateDrug,\n  getAllInventory,\n  createInventory\n};\n\nfunction getDashboardStats() {\n  var _getAdminUtils;\n\n  const organization_id = (_getAdminUtils = getAdminUtils(\"admin_data\")) === null || _getAdminUtils === void 0 ? void 0 : _getAdminUtils.organisationId;\n  console.log(organization_id);\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/organisations/${organization_id}/clients`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_STATS_SUCCESS,\n      payload: data\n    });\n  };\n}\n\nfunction getAllOrganisation() {\n  var _getAdminUtils2;\n\n  const organization_id = (_getAdminUtils2 = getAdminUtils(\"admin_data\")) === null || _getAdminUtils2 === void 0 ? void 0 : _getAdminUtils2.organisationId;\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/organisations/${organization_id}/suborganisations`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_ORGANISATIONS_SUCCESS,\n      payload: data\n    });\n  };\n}\n\nfunction getAllRoles() {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/roles`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_ROLES_SUCCESS,\n      payload: data\n    });\n  };\n}\n\nfunction getAllStaffs(id, type) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/users/${id}/company?type=${type}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_USERS_SUCCESS,\n      payload: data\n    });\n  };\n}\n\nfunction editStaff(formData, id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.put(`/users/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\"); // reloadPage()\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction getOneDrug(id) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/drugs/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_DRUG,\n      payload: data\n    });\n  };\n}\n\nfunction getOneUser(id) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/users/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_USER,\n      payload: data\n    });\n  };\n}\n\nfunction getAllDrugs() {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/drugs`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_DRUGS_SUCCESS,\n      payload: data\n    });\n  };\n}\n\nfunction getAllDrugsCategories() {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/drugscategories`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_DRUGS_CATEGORY,\n      payload: data\n    });\n  };\n}\n\nfunction getAllManufacturers() {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/manufacturers`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_MANUFACTURERS,\n      payload: data\n    });\n  };\n}\n\nfunction getAllSuppliers() {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/suppliers`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_SUPLIERS,\n      payload: data\n    });\n  };\n}\n\nfunction getAllInventory() {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/inventories`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_INVENTORY,\n      payload: data\n    });\n  };\n}\n\nfunction getOneManufacturer(id) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/manufacturers/${id}`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_MANUFACTURER,\n      payload: data\n    });\n  };\n}\n\nfunction getOneSupplier(id) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/suppliers/${id}`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_SUPPLIER,\n      payload: data\n    });\n  };\n}\n\nfunction registerManufacturer(formData) {\n  try {\n    return async dispatch => {\n      const data = await Connector.post(`/manufacturers`, formData);\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerSupplier(formData) {\n  try {\n    return async dispatch => {\n      const data = await Connector.post(`/suppliers`, formData);\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction updateManufacturer(formData, id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.put(`/manufacturers/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\n\nfunction updateSuppliers(formData, id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.put(`/suppliers/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\n\nfunction createDrug(formData) {\n  try {\n    return async dispatch => {\n      const data = await Connector.post(`/drugs`, formData);\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction createInventory(formData) {\n  try {\n    return async dispatch => {\n      const data = await Connector.post(`/inventories`, formData);\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction updateDrug(formData, id) {\n  try {\n    return async dispatch => {\n      const data = await Connector.put(`/drugs/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerOrganisation(formData) {\n  try {\n    return async dispatch => {\n      var _data$data;\n\n      const data = await Connector.post(`/organisations/register`, formData);\n      console.log(data);\n      notify(data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.data);\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerClient(formData) {\n  try {\n    return async dispatch => {\n      var _data$data2;\n\n      const data = await Connector.post(`/clients/register`, formData);\n      console.log(data);\n      notify(data === null || data === void 0 ? void 0 : (_data$data2 = data.data) === null || _data$data2 === void 0 ? void 0 : _data$data2.data);\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerStaff(formData) {\n  try {\n    return async dispatch => {\n      var _data$data3;\n\n      const data = await Connector.post(`/users/register`, formData);\n      console.log(data);\n      notify(data === null || data === void 0 ? void 0 : (_data$data3 = data.data) === null || _data$data3 === void 0 ? void 0 : _data$data3.data);\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}","map":{"version":3,"sources":["/Users/frontenddev/Documents/MedPharm/src/Actions/dashboard.action.js"],"names":["DashboardConstants","Connector","getAdminUtils","reloadPage","notify","dashboardActions","getDashboardStats","getAllRoles","getAllStaffs","registerOrganisation","getAllOrganisation","registerClient","registerStaff","getAllDrugs","getAllDrugsCategories","createDrug","getOneDrug","getOneUser","editStaff","getAllManufacturers","getOneManufacturer","registerManufacturer","updateManufacturer","updateSuppliers","getAllSuppliers","registerSupplier","getOneSupplier","updateDrug","getAllInventory","createInventory","organization_id","organisationId","console","log","dispatch","data","get","type","DASHBOARD_STATS_SUCCESS","payload","DASHBOARD_ORGANISATIONS_SUCCESS","DASHBOARD_ROLES_SUCCESS","id","DASHBOARD_USERS_SUCCESS","formData","put","err","DASHBOARD_GET_ONE_DRUG","DASHBOARD_GET_ONE_USER","DASHBOARD_GET_DRUGS_SUCCESS","DASHBOARD_GET_DRUGS_CATEGORY","DASHBOARD_GET_MANUFACTURERS","DASHBOARD_GET_SUPLIERS","DASHBOARD_GET_INVENTORY","DASHBOARD_GET_ONE_MANUFACTURER","DASHBOARD_GET_ONE_SUPPLIER","post"],"mappings":"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","sourcesContent":["import { DashboardConstants } from \"../constants/AdminConstants\";\nimport Connector from '../Components/Services/services';\nimport { getAdminUtils, reloadPage } from '../Components/Services/helper';\nimport { notify } from \"../config\";\n\nexport const dashboardActions = {\n  getDashboardStats,\n  getAllRoles,\n  getAllStaffs,\n  registerOrganisation,\n  getAllOrganisation,\n  registerClient,\n  registerStaff,\n  getAllDrugs,\n  getAllDrugsCategories,\n  createDrug,\n  getOneDrug,\n  getOneUser,\n  editStaff,\n  getAllManufacturers,\n  getOneManufacturer,\n  registerManufacturer,\n  updateManufacturer,\n  updateSuppliers,\n  getAllSuppliers,\n  registerSupplier,\n  getOneSupplier,\n  updateDrug,\n  getAllInventory,\n  createInventory,\n};\n\nfunction getDashboardStats() {\n  const organization_id = getAdminUtils(\"admin_data\")?.organisationId\n  console.log(organization_id)\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/organisations/${organization_id}/clients`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_STATS_SUCCESS,\n      payload: data,\n    });\n  };\n}\nfunction getAllOrganisation() {\n  const organization_id = getAdminUtils(\"admin_data\")?.organisationId\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/organisations/${organization_id}/suborganisations`);\n    console.log(data)\n    dispatch({\n      type: DashboardConstants.DASHBOARD_ORGANISATIONS_SUCCESS,\n      payload: data,\n    });\n  };\n}\nfunction getAllRoles() {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/roles`);\n    console.log(data)\n    dispatch({\n      type: DashboardConstants.DASHBOARD_ROLES_SUCCESS,\n      payload: data,\n    });\n  };\n}\nfunction getAllStaffs(id,type) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/users/${id}/company?type=${type}`);\n    console.log(data)\n    dispatch({\n      type: DashboardConstants.DASHBOARD_USERS_SUCCESS,\n      payload: data,\n    });\n  };\n}\n\nfunction editStaff(formData,id){\n  try{\n   return async (dispatch) => {\n      const data = await Connector.put(`/users/${id}`,formData);\n      console.log(data)\n      notify(\"Successfully updated\")\n      // reloadPage()\n    };\n  }\n  catch(err){\n    notify(\"failed to process\")\n  }\n}\nfunction getOneDrug(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/drugs/${id}`);\n    console.log(data)\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_DRUG,\n      payload: data,\n    });\n  };\n}\n\n\nfunction getOneUser(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/users/${id}`);\n    console.log(data)\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_USER,\n      payload: data,\n    });\n  };\n}\n\nfunction getAllDrugs() {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/drugs`);\n    console.log(data)\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_DRUGS_SUCCESS,\n      payload: data,\n    });\n  };\n}\nfunction getAllDrugsCategories() {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/drugscategories`);\n    console.log(data)\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_DRUGS_CATEGORY,\n      payload: data,\n    });\n  };\n}\nfunction getAllManufacturers() {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/manufacturers`);\n    console.log(data)\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_MANUFACTURERS,\n      payload: data,\n    });\n  };\n}\nfunction getAllSuppliers() {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/suppliers`);\n    console.log(data)\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_SUPLIERS,\n      payload: data,\n    });\n  };\n}\nfunction getAllInventory() {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/inventories`);\n    console.log(data)\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_INVENTORY,\n      payload: data,\n    });\n  };\n}\n\nfunction getOneManufacturer(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/manufacturers/${id}`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_MANUFACTURER,\n      payload: data,\n    });\n  };\n}\nfunction getOneSupplier(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/suppliers/${id}`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_SUPPLIER,\n      payload: data,\n    });\n  };\n}\n\nfunction registerManufacturer(formData){\n  try{\n   return async (dispatch) => {\n      const data = await Connector.post(`/manufacturers`,formData);\n      console.log(data)\n      notify(\"Successfully created\")\n      reloadPage()\n    };\n  }\n  catch(err){\n    notify(\"failed to process\")\n  }\n}\nfunction registerSupplier(formData){\n  try{\n   return async (dispatch) => {\n      const data = await Connector.post(`/suppliers`,formData);\n      console.log(data)\n      notify(\"Successfully created\")\n      reloadPage()\n    };\n  }\n  catch(err){\n    notify(\"failed to process\")\n  }\n}\n\nfunction updateManufacturer(formData,id){\n  try{\n   return async (dispatch) => {\n      const data = await Connector.put(`/manufacturers/${id}`,formData);\n      console.log(data)\n      notify(\"Successfully updated\")\n      reloadPage()\n    };\n  }\n  catch(err){\n    notify(\"failed to update\")\n  }\n}\nfunction updateSuppliers(formData,id){\n  try{\n   return async (dispatch) => {\n      const data = await Connector.put(`/suppliers/${id}`,formData);\n      console.log(data)\n      notify(\"Successfully updated\")\n      reloadPage()\n    };\n  }\n  catch(err){\n    notify(\"failed to update\")\n  }\n}\n\n\nfunction createDrug(formData){\n  try{\n   return async (dispatch) => {\n      const data = await Connector.post(`/drugs`,formData);\n      console.log(data)\n      notify(\"Successfully created\")\n      reloadPage()\n    };\n  }\n  catch(err){\n    notify(\"failed to process\")\n  }\n}\n\n\nfunction createInventory(formData){\n  try{\n   return async (dispatch) => {\n      const data = await Connector.post(`/inventories`,formData);\n      console.log(data)\n      notify(\"Successfully created\")\n      reloadPage()\n    };\n  }\n  catch(err){\n    notify(\"failed to process\")\n  }\n}\n\nfunction updateDrug(formData,id){\n  try{\n   return async (dispatch) => {\n      const data = await Connector.put(`/drugs/${id}`,formData);\n      console.log(data)\n      notify(\"Successfully updated\")\n      reloadPage()\n    };\n  }\n  catch(err){\n    notify(\"failed to process\")\n  }\n}\n\nfunction registerOrganisation(formData){\n  try{\n   return async (dispatch) => {\n      const data = await Connector.post(`/organisations/register`,formData);\n      console.log(data)\n      notify(data?.data?.data)\n    };\n  }\n  catch(err){\n    notify(\"failed to process\")\n  }\n}\n\nfunction registerClient(formData){\n  try{\n   return async (dispatch) => {\n      const data = await Connector.post(`/clients/register`,formData);\n      console.log(data)\n      notify(data?.data?.data)\n    };\n  }\n  catch(err){\n    notify(\"failed to process\")\n  }\n}\n\nfunction registerStaff(formData){\n  try{\n   return async (dispatch) => {\n      const data = await Connector.post(`/users/register`,formData);\n      console.log(data)\n      notify(data?.data?.data)\n    };\n  }\n  catch(err){\n    notify(\"failed to process\")\n  }\n}\n"]},"metadata":{},"sourceType":"module"}