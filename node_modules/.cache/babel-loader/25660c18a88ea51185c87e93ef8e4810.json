{"ast":null,"code":"import { DashboardConstants } from \"../constants/AdminConstants\";\nimport Connector from '../Components/Services/services';\nimport { getAdminUtils } from '../Components/Services/helper';\nimport { notify } from \"../config\";\nexport const dashboardActions = {\n  getDashboardStats,\n  getAllStaffs,\n  registerOrganisation,\n  getAllOrganisation,\n  registerClient\n};\n\nfunction getDashboardStats() {\n  var _getAdminUtils;\n\n  const organization_id = (_getAdminUtils = getAdminUtils(\"admin_data\")) === null || _getAdminUtils === void 0 ? void 0 : _getAdminUtils.organisationId;\n  console.log(organization_id);\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/organisations/${organization_id}/clients`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_STATS_SUCCESS,\n      payload: data\n    });\n  };\n}\n\nfunction getAllOrganisation() {\n  var _getAdminUtils2;\n\n  const organization_id = (_getAdminUtils2 = getAdminUtils(\"admin_data\")) === null || _getAdminUtils2 === void 0 ? void 0 : _getAdminUtils2.organisationId;\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/organisations/${organization_id}/suborganisations`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_ORGANISATIONS_SUCCESS,\n      payload: data\n    });\n  };\n}\n\nfunction getAllRoles() {\n  var _getAdminUtils3;\n\n  const organization_id = (_getAdminUtils3 = getAdminUtils(\"admin_data\")) === null || _getAdminUtils3 === void 0 ? void 0 : _getAdminUtils3.organisationId;\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/organisations/${organization_id}/suborganisations`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_ORGANISATIONS_SUCCESS,\n      payload: data\n    });\n  };\n}\n\nfunction getAllStaffs(id, type) {\n  return async dispatch => {\n    const {\n      data: {\n        data\n      }\n    } = await Connector.get(`/users/${id}/company?type=${type}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_USERS_SUCCESS,\n      payload: data\n    });\n  };\n}\n\nfunction registerOrganisation(formData) {\n  try {\n    return async dispatch => {\n      var _data$data;\n\n      const data = await Connector.post(`/organisations/register`, formData);\n      console.log(data);\n      notify(data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.data);\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerClient(formData) {\n  try {\n    return async dispatch => {\n      var _data$data2;\n\n      const data = await Connector.post(`/clients/register`, formData);\n      console.log(data);\n      notify(data === null || data === void 0 ? void 0 : (_data$data2 = data.data) === null || _data$data2 === void 0 ? void 0 : _data$data2.data);\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}","map":{"version":3,"sources":["/Users/frontenddev/Documents/MedPharm/src/Actions/dashboard.action.js"],"names":["DashboardConstants","Connector","getAdminUtils","notify","dashboardActions","getDashboardStats","getAllStaffs","registerOrganisation","getAllOrganisation","registerClient","organization_id","organisationId","console","log","dispatch","data","get","type","DASHBOARD_STATS_SUCCESS","payload","DASHBOARD_ORGANISATIONS_SUCCESS","getAllRoles","id","DASHBOARD_USERS_SUCCESS","formData","post","err"],"mappings":"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","sourcesContent":["import { DashboardConstants } from \"../constants/AdminConstants\";\nimport Connector from '../Components/Services/services';\nimport { getAdminUtils } from '../Components/Services/helper';\nimport { notify } from \"../config\";\n\nexport const dashboardActions = {\n  getDashboardStats,\n  getAllStaffs,\n  registerOrganisation,\n  getAllOrganisation,\n  registerClient,\n};\n\nfunction getDashboardStats() {\n  const organization_id = getAdminUtils(\"admin_data\")?.organisationId\n  console.log(organization_id)\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/organisations/${organization_id}/clients`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_STATS_SUCCESS,\n      payload: data,\n    });\n  };\n}\nfunction getAllOrganisation() {\n  const organization_id = getAdminUtils(\"admin_data\")?.organisationId\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/organisations/${organization_id}/suborganisations`);\n    console.log(data)\n    dispatch({\n      type: DashboardConstants.DASHBOARD_ORGANISATIONS_SUCCESS,\n      payload: data,\n    });\n  };\n}\nfunction getAllRoles() {\n  const organization_id = getAdminUtils(\"admin_data\")?.organisationId\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/organisations/${organization_id}/suborganisations`);\n    console.log(data)\n    dispatch({\n      type: DashboardConstants.DASHBOARD_ORGANISATIONS_SUCCESS,\n      payload: data,\n    });\n  };\n}\nfunction getAllStaffs(id,type) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/users/${id}/company?type=${type}`);\n    console.log(data)\n    dispatch({\n      type: DashboardConstants.DASHBOARD_USERS_SUCCESS,\n      payload: data,\n    });\n  };\n}\n\nfunction registerOrganisation(formData){\n  try{\n   return async (dispatch) => {\n      const data = await Connector.post(`/organisations/register`,formData);\n      console.log(data)\n      notify(data?.data?.data)\n    };\n  }\n  catch(err){\n    notify(\"failed to process\")\n  }\n}\n\nfunction registerClient(formData){\n  try{\n   return async (dispatch) => {\n      const data = await Connector.post(`/clients/register`,formData);\n      console.log(data)\n      notify(data?.data?.data)\n    };\n  }\n  catch(err){\n    notify(\"failed to process\")\n  }\n}\n"]},"metadata":{},"sourceType":"module"}